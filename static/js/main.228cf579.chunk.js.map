{"version":3,"sources":["Modal/modal.js","Projects/projects.js","serviceWorker.js","index.js"],"names":["Modal","props","react_default","a","createElement","className","title","info","onClick","cancel","Project","state","creating","openModal","_this","setState","closeModal","Object","esm_extends","this","Fragment","Modal_modal","name","lang","target","href","sourcelink","React","Component","Boolean","window","location","hostname","match","App","projects","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAaeA,SAVH,SAAAC,GACV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBJ,EAAMK,OACrCJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiBJ,EAAMM,MACpCL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAsBG,QAASP,EAAMQ,YCmCzCC,0NArCbC,MAAQ,CACNC,UAAU,KAGZC,UAAY,WACVC,EAAKC,SAAS,CAAEH,UAAU,OAG5BI,WAAa,WACXF,EAAKC,SAAS,CAAEH,UAAU,6EAGnB,IACIX,EADJgB,OAAAC,EAAA,EAAAD,CAAA,GACcE,KAAKlB,OAC1B,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,KACGD,KAAKR,MAAMC,UAAYV,EAAAC,EAAAC,cAAA,iBACvBe,KAAKR,MAAMC,UACVV,EAAAC,EAAAC,cAACiB,EAAD,CACEf,MAAOL,EAAMqB,KACbf,KAAMN,EAAMM,KACZE,OAAQU,KAAKH,aAGjBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAII,QAASW,KAAKN,WAAYZ,EAAMqB,MACpCpB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYJ,EAAMsB,MAChCrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASmB,OAAO,SAASC,KAAMxB,EAAMyB,YAC/C,IADH,cAEc,cA9BFC,IAAMC,YCORC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCZAC,mLAEF,OACEhC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,KACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC+B,EAAD,CACEb,KAAK,YACLC,KAAK,KACLG,WAAW,gDACXnB,KAAK,2CAEPL,EAAAC,EAAAC,cAAC+B,EAAD,CACEb,KAAK,aACLC,KAAK,UACLG,WAAW,kCACXnB,KAAK,2CAEPL,EAAAC,EAAAC,cAAC+B,EAAD,CACEb,KAAK,YACLC,KAAK,WACLG,WAAW,4CACXnB,KAAK,2CAEPL,EAAAC,EAAAC,cAAC+B,EAAD,CACEb,KAAK,YACLC,KAAK,SACLhB,KAAK,oDA1BCoB,IAAMC,WAkCxBQ,iBAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,aDyFlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.228cf579.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./modal.css\";\r\n\r\nvar Modal = props => {\r\n  return (\r\n    <div className=\"modal\">\r\n      <h2 className=\"modal_content\">{props.title}</h2>\r\n      <p className=\"modal_content\">{props.info}</p>\r\n      <i className=\"exitBtn fa fa-close\" onClick={props.cancel} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\nimport Modal from \"../Modal/modal\";\nimport backdrop from \"../Backdrop/backdrop\";\nimport \"./project.css\";\n\nclass Project extends React.Component {\n  state = {\n    creating: false\n  };\n\n  openModal = () => {\n    this.setState({ creating: true });\n  };\n\n  closeModal = () => {\n    this.setState({ creating: false });\n  };\n\n  render() {\n    const { ...props } = this.props;\n    return (\n      <>\n        {this.state.creating && <backdrop />}\n        {this.state.creating && (\n          <Modal\n            title={props.name}\n            info={props.info}\n            cancel={this.closeModal}\n          />\n        )}\n        <div className=\"project\">\n          <h1 onClick={this.openModal}>{props.name}</h1>\n          <h3 className=\"language\">{props.lang}</h3>\n          <a className=\"source\" target=\"_blank\" href={props.sourcelink}>\n            {\" \"}\n            View Source{\" \"}\n          </a>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Project;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Project from \"./Projects/projects\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <Project\r\n            name=\"Project 1\"\r\n            lang=\"C#\"\r\n            sourcelink=\"https://github.com/nerrma/Software2Assignment\"\r\n            info=\"This was made using XYZ. I learnt XYZ.\"\r\n          />\r\n          <Project\r\n            name=\"Project 2 \"\r\n            lang=\"Node JS\"\r\n            sourcelink=\"https://github.com/nerrma/nerch\"\r\n            info=\"This was made using XYZ. I learnt XYZ.\"\r\n          />\r\n          <Project\r\n            name=\"Project 3\"\r\n            lang=\"React JS\"\r\n            sourcelink=\"https://github.com/nerrma/react-portfolio\"\r\n            info=\"This was made using XYZ. I learnt XYZ.\"\r\n          />\r\n          <Project\r\n            name=\"Project 4\"\r\n            lang=\"Python\"\r\n            info=\"This was made using XYZ. I learnt XYZ.\"\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<App />, document.getElementById(\"projects\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}